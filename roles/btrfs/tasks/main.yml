- name: create btrfs filesystems
  ansible.builtin.filesystem:
    fstype: btrfs
    dev: "{{ item }}"
    state: present
  with_items:
    - "{{ nvme_device }}"
    - "{{ hdd_device1 }}"
    - "{{ hdd_device2 }}"

- name: get btrfs info
  community.general.btrfs_info:
  register: btrfs_info

- name: set facts for UUIDs from btrfs info
  ansible.builtin.set_fact:
    nvme_uuid: "{{ btrfs_info.filesystems | selectattr('devices', 'contains', nvme_device) | map(attribute='uuid') | first }}"
    hdd1_uuid: "{{ btrfs_info.filesystems | selectattr('devices', 'contains', hdd_device1) | map(attribute='uuid') | first }}"
    hdd2_uuid: "{{ btrfs_info.filesystems | selectattr('devices', 'contains', hdd_device2) | map(attribute='uuid') | first }}"

- name: set facts for labels from btrfs info
  ansible.builtin.set_fact:
    has_label_nvme: "{{ btrfs_info.filesystems | selectattr('devices', 'contains', nvme_device) | map(attribute='label') | first }}"
    has_label_hdd1: "{{ btrfs_info.filesystems | selectattr('devices', 'contains', hdd_device1) | map(attribute='label') | first }}"

- name: set facts for mounted state from ansible_mounts
  ansible.builtin.set_fact:
    is_mounted_nvme: "{{ ansible_mounts | selectattr('device', 'equalto', nvme_device) | map(attribute='device') }}"
    is_mounted_hdd1: "{{ ansible_mounts | selectattr('device', 'equalto', hdd_device1) | map(attribute='device') }}"
    is_mounted_hdd2: "{{ ansible_mounts | selectattr('device', 'equalto', hdd_device2) | map(attribute='device') }}"

- name: mount {{ nvme_device }} to {{ nvme_mount_point }}
  ansible.posix.mount:
    path: "{{ nvme_mount_point }}"
    src: "{{ nvme_device }}"
    fstype: btrfs
    state: mounted
  when: is_mounted_nvme == []

- name: mount {{ hdd_device1}} to {{ hdd_mount_point }}
  ansible.posix.mount:
    path: "{{ hdd_mount_point }}"
    src: "{{ hdd_device1 }}"
    fstype: btrfs
    state: mounted
  when: is_mounted_hdd1 == []

- name: add {{ hdd_device2 }} to BTRFS filesystem
  ansible.builtin.command: btrfs device add {{ hdd_device2 }} {{ hdd_mount_point }} -f
  when: btrfs_info.filesystems | selectattr('devices', 'contains', hdd_device1) | map(attribute='devices') | flatten | length == 1

- name: check BTRFS raid status for {{ hdd_device1 }} and {{ hdd_device2 }}
  ansible.builtin.shell: btrfs filesystem df {{ hdd_mount_point }} | grep RAID1
  changed_when: false
  failed_when: false
  register: btrfs_df

- name: create BTRFS raid for {{ hdd_device1 }} and {{ hdd_device2 }}
  ansible.builtin.command: btrfs balance start -dconvert=raid1 -mconvert=raid1 {{ hdd_mount_point }}
  when: btrfs_df.rc != 0

- name: add label to {{ nvme_mount_point }}
  ansible.builtin.command: btrfs filesystem label {{ nvme_mount_point }} {{ nvme_filesystem_label }}
  when: has_label_nvme == ""

- name: add label to {{ hdd_mount_point }}
  ansible.builtin.command: btrfs filesystem label {{ hdd_mount_point }} {{ hdd_filesystem_label }}
  when: has_label_hdd1 == ""

- name: add {{ nvme_device }} to /etc/fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    regexp: "^{{ nvme_device }}"
    line: "UUID={{ nvme_uuid }} {{ nvme_mount_point }} btrfs defaults,autodefrag 0 2"

- name: add {{ hdd_device1 }} to /etc/fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    regexp: "^{{ hdd_device1 }}"
    line: "UUID={{ hdd1_uuid }} {{ hdd_mount_point }} btrfs defaults,autodefrag 0 2"